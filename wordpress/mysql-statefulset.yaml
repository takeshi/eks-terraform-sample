apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  master.cnf: |
    [client]
    user = root
    password = pass
    # Apply this config only on the master.
    [mysqld]
    log-bin
    bind-address = 127.0.0.1
  slave.cnf: |
    [client]
    user = root
    password = pass
    # Apply this config only on slaves.
    [mysqld]
    super-read-only
    bind-address = 127.0.0.1

---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      serviceAccountName: consul-k8s-sa
      initContainers:
      - name: init-mysql
        image: mysql:5.6
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map

      containers:
      - name: consul
        image: kodosan/consul:1.2.3
        imagePullPolicy: IfNotPresent
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        command:
          - "/bin/sh"
          - "-ec"
          - |
            exec /bin/consul agent \
              -advertise="${POD_IP}" \
              -client=0.0.0.0 \
              -config-dir=/consul/config \
              -data-dir=/consul/data \
              -ui \
              -rejoin \
              -retry-join="provider=k8s label_selector=\"app=consul,component=server\"" \
        volumeMounts:
        - name: data
          mountPath: /consul/data
        - name: config
          mountPath: /consul/config  
      - image: mysql:5.6
        name: mysql
        env:
        # - name: MYSQL_ALLOW_EMPTY_PASSWORD
        #   value: "1"
        - name: MYSQL_ROOT_PASSWORD
          value: pass
          # valueFrom:
          #   secretKeyRef:
          #     name: mysql-pass
          #     key: password          
        ports:
        - containerPort: 3306
          name: mysql
        livenessProbe:
          tcpSocket: 
            port: 3306
          # exec:
          #   command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5          
        readinessProbe:
          tcpSocket: 
            port: 3306
          # exec:
          #   # Check we can execute queries over TCP (skip-networking is off).
          #   command: ["mysql", "-h", "localhost", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      - name: data
        emptyDir: {}
      - name: config
        configMap:
          name: consul-config-mysql               
  volumeClaimTemplates:
  - metadata:
      name: mysql-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: consul-config-mysql
data:
  web.hcl: |
    connect {
       enabled = true
    }
    "services" = {
      "name" = "mysql"
      "port" = 3306
      "tags" = ["db"]
      "connect" = {
        "proxy" = {
          "config" = {   
              # upstreams {
              #  "destination_name" = "mysql"
              #   "local_bind_port" = 3307
              # }
          }
        } 
      }
    }

